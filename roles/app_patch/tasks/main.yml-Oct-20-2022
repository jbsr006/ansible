---
# tasks file for jp_patch.yml

      - name: Is Jobprocessor running or not ?
        shell: /etc/init.d/JobProcessor status
        register: JobProcesser_prestatus
        ignore_errors: True
        tags: stopjp

      - debug: msg="{{JobProcesser_prestatus.stdout}}"
        tags: stopjp

      - name: Stopping the Jobprocessor service
        shell: /etc/init.d/JobProcessor stop
        when: "'running' in JobProcesser_prestatus.stdout"
        ignore_errors: True
        tags: stopjp
        
      - name: Is Jobprocessor running or not ?
        shell: /etc/init.d/JobProcessor status
        register: JobProcesser_stopstatus
        ignore_errors: True
        tags: stopjp

      - debug: msg="{{JobProcesser_stopstatus.stdout}}"
        tags: stopjp
                
      - name: Performing apt update
        apt:
          update_cache: yes
          cache_valid_time: 3600
        tags: patchjp

      - name: Performing auto-clean
        apt:
           autoclean: yes
        tags: patchjp

      - name: Performing auto-remove
        apt:
          autoremove: yes
        tags: patchjp

      - name: Check if there are packages available to be installed/upgraded
        command: /usr/bin/apt list --upgradeable
        register: packages
        tags: patchjp
         
      - name: Pausing playbook for 5 seconds, this is to eliminate SSH error issue
        wait_for:
           timeout: 5
        delegate_to: localhost
        tags: patchjp        

      - name: Performing patching on the server
        apt:
          upgrade: dist
        when: packages.stderr != ""
        tags: patchjp

      - name: Pausing playbook for 5 seconds, this is to eliminate SSH error issue
        wait_for:
           timeout: 5
        delegate_to: localhost
        tags: patchjp

      - name: reboot the server post patching.
        reboot:
           msg: "Reboot initiated by ansible after patching"
           connect_timeout: 5
           reboot_timeout: 600
           pre_reboot_delay: 0
           post_reboot_delay: 30
           test_command: whoami
        tags: rebootjp

      - name: Is Jobprocessor running or not ?
        shell: /etc/init.d/JobProcessor status
        register: JobProcesser_poststatus
        ignore_errors: True
        tags: startjp

      - debug: msg="{{JobProcesser_poststatus.stdout}}"
        tags: startjp

      - name: Starting the Jobprocessor service
        shell: /etc/init.d/JobProcessor start
        when: "'stopped' in JobProcesser_poststatus.stdout"
        ignore_errors: True
        tags: startjp

      - name: start ntp service
        shell: /etc/init.d/ntp start
        ignore_errors: True
        tags: startjp  

      - name: Is Jobprocessor running or not ?
        shell: /etc/init.d/JobProcessor status
        register: JobProcesser_startstatus
        ignore_errors: True
        tags: startjp

      - debug: msg="{{JobProcesser_startstatus.stdout}}"
        tags: startjp  

      - name: get uptime
        shell: "uptime | awk -F, '{ print $1}'"
        register: uptim
        tags: patchreport

      - name: get kernel version
        shell: "uname -r"
        register: unam
        tags: patchreport        

      - name: get JobProcessor status post patching
        shell: "grep 'SUCCESS' /var/log/JobProcessor/JobProcessor.log | tail -n1"
        register: JobProcesser_patch
        tags: patchreport

      - name: Getting JP Nodes Patching report status
        template: 
           src: JobProcessor_patch.j2
           dest: /data/ansible/logs/jp_nodes_result/{{set}}_nodes_patch_report_{{ ansible_date_time.date }}.txt
        delegate_to: localhost
        run_once: true
        tags: patchreport

      - name: Preparing JP Patch report
        shell: cat /data/ansible/logs/jp_nodes_result/{{set}}_nodes_patch_report_{{ ansible_date_time.date }}.txt
        register: patch_data
        delegate_to: localhost
        run_once: true
        tags: patchreport

      - name: Append to Final JP Patch report
        lineinfile: 
          dest: /data/ansible/logs/jp_nodes_result/final_jp_patching_report_{{ ansible_date_time.date }}.txt
          insertafter: EOF
          line: "{{ patch_data.stdout }}"
          create: yes
        run_once: true  
        delegate_to: localhost
        tags: patchreport
